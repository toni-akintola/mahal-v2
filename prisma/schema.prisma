// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User profile extending Clerk authentication
model User {
  id              String   @id @default(cuid())
  clerkUserId     String   @unique @map("clerk_user_id")
  displayName     String?  @map("display_name")
  email           String?
  firstName       String?  @map("first_name")
  lastName        String?  @map("last_name")
  imageUrl        String?  @map("image_url")
  
  // Learning stats
  level           Int      @default(1)
  totalXp         Int      @default(0) @map("total_xp")
  currentStreak   Int      @default(1) @map("current_streak")
  longestStreak   Int      @default(1) @map("longest_streak")
  hearts          Int      @default(5)
  
  // Onboarding data
  onboardingCompleted Boolean @default(false) @map("onboarding_completed")
  motivation          String?
  experience          String?
  goals               String[] // Array of goal IDs
  dailyTimeCommitment String?  @map("daily_time_commitment")
  
  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  lastActiveAt    DateTime @default(now()) @map("last_active_at")
  lastXpGainedAt  DateTime? @map("last_xp_gained_at")
  
  // Relations
  lessonProgress  UserLessonProgress[]
  achievements    UserAchievement[]
  dailyStats      DailyStats[]
  sentFriendships Friendship[] @relation("UserFriendships")
  receivedFriendships Friendship[] @relation("FriendFriendships")
  studyGroupMemberships StudyGroupMember[]
  
  @@map("users")
}

// Lesson structure
model Lesson {
  id               String   @id @default(cuid())
  title            String
  description      String
  difficultyLevel  String   @map("difficulty_level") // beginner, intermediate, advanced
  orderIndex       Int      @map("order_index")
  category         String   // greetings, family, numbers, etc.
  estimatedMinutes Int      @default(10) @map("estimated_minutes")
  xpReward         Int      @default(10) @map("xp_reward")
  
  // Lesson content (JSON)
  exercises        Json     // Array of exercise objects
  
  // Metadata
  isPublished      Boolean  @default(false) @map("is_published")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  userProgress     UserLessonProgress[]
  
  @@map("lessons")
}

// Track user progress through lessons
model UserLessonProgress {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  lessonId          String   @map("lesson_id")
  
  status            String   @default("pending") // pending, in_progress, completed
  progressPercentage Int     @default(0) @map("progress_percentage")
  attempts          Int      @default(0)
  bestScore         Int?     @map("best_score")
  totalTimeSpent    Int      @default(0) @map("total_time_spent") // in seconds
  
  startedAt         DateTime? @map("started_at")
  completedAt       DateTime? @map("completed_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson            Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("user_lesson_progress")
}

// Achievement system
model Achievement {
  id               String   @id @default(cuid())
  key              String   @unique // unique identifier like "first_lesson", "streak_7"
  title            String
  description      String
  icon             String   // icon name or emoji
  category         String   // learning, social, streak, etc.
  
  // Achievement criteria
  targetValue      Int?     @map("target_value") // for progressive achievements
  isProgressive    Boolean  @default(false) @map("is_progressive")
  
  // Rewards
  xpReward         Int      @default(0) @map("xp_reward")
  
  // Metadata
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  
  // Relations
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

// Track which users have earned achievements
model UserAchievement {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  achievementId String   @map("achievement_id")
  
  progress      Int      @default(0) // for progressive achievements
  earnedAt      DateTime? @map("earned_at")
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Track daily activity for streaks and stats
model DailyStats {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  date             DateTime @db.Date
  
  xpEarned         Int      @default(0) @map("xp_earned")
  lessonsCompleted Int      @default(0) @map("lessons_completed")
  timeSpent        Int      @default(0) @map("time_spent") // in seconds
  streakDay        Int      @default(0) @map("streak_day") // day number in current streak
  
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@map("daily_stats")
}

// Friendship system
model Friendship {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  friendId   String   @map("friend_id")
  
  status     String   @default("pending") // pending, accepted, blocked
  createdAt  DateTime @default(now()) @map("created_at")
  acceptedAt DateTime? @map("accepted_at")
  
  // Relations
  user       User     @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend     User     @relation("FriendFriendships", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
  @@map("friendships")
}

// Study groups for collaborative learning
model StudyGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(true) @map("is_public")
  maxMembers  Int      @default(20) @map("max_members")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  members     StudyGroupMember[]
  
  @@map("study_groups")
}

// Study group membership
model StudyGroupMember {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  studyGroupId String   @map("study_group_id")
  
  role         String   @default("member") // member, moderator, admin
  joinedAt     DateTime @default(now()) @map("joined_at")
  
  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyGroup   StudyGroup @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)
  
  @@unique([userId, studyGroupId])
  @@map("study_group_members")
}
